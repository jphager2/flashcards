#!/usr/bin/env ruby

require_relative "../lib/flashcards"
require "tempfile"

module Flashcards
  class Interactive
    MAIN_MENU = <<-MENU
Actions available:

  * exit            -> quit flashcards
  * open [filename] -> open a deck
  * new             -> create a new deck

    MENU

    MAIN_MENU_ACTIONS = {
      "exit" => lambda { |interactive| exit },
      "open" => lambda { |interactive, filename|
        interactive.open_deck(filename)
      },
      "new" => lambda { |interactive| interactive.new_deck },
    }

    DECK_MENU = <<-MENU
Actions available:

  * menu            -> go back to main menu
  * reopen          -> open the deck again (overwriting changes)
  * save [filename] -> write the deck to filename
  * add             -> adds a new card to the deck through an
                       interactive process
  * flash           -> shows the top flash card on the deck
  * all             -> interactively goes through cards in the deck
  * shuffle         -> shuffles the deck

    MENU

    DECK_MENU_ACTIONS = {
      "add" => lambda { |interactive, deck| interactive.add_card(deck) },
      "reopen" => lambda { |interactive, deck|
        MAIN_MENU_ACTIONS["open"].call(interactive, deck.filename)
      },
      "save" => lambda { |interactive, deck, filename = nil|
        filename ||= deck.filename

        deck.write(filename)
      },
      "flash" => lambda { |interactive, deck| interactive.flash(deck) },
      "all" => lambda { |interactive, deck| interactive.flash_all(deck) },
      "shuffle" => lambda { |interactive, deck| deck.shuffle },
    }
    
    def run
      action, args = menu(MAIN_MENU)
      args.unshift(self)
      if MAIN_MENU_ACTIONS[action]
        MAIN_MENU_ACTIONS[action].call(*args)
      else
        action_not_found(action)
      end

      run
    end

    def menu(text)
      puts text
      print "> "
      input = gets.chomp.split(" ")
      puts
      return input.shift, input
    end

    def action_not_found(action)
      puts "Don't know how to do '#{action}'"
    end

    def flash_all(deck)
      deck.shuffle

      loop do
        flash(deck, prompt_next: false)
        puts "Press ENTER for next card. Type exit to quit."
        print "> "
        input = gets.chomp
        break unless input.empty?
      end
    end

    def flash(deck, prompt_next: true)
      card = deck.next_card(shuffle: true)
      puts "FRONT"
      puts
      print "\s\s"
      puts card.front.gsub(/\n/, "\n\s\s")
      puts
      puts "Press ENTER to flip."
      gets
      puts "BACK"
      puts
      print "\s\s"
      puts card.back.gsub(/\n/, "\n\s\s")
      puts
      if prompt_next
        puts "Press ENTER to continue."
        gets
      end
    end

    def add_card(deck)
      puts "FRONT (two empty lines to finish)"

      card_data = {}
      %i{ front back }.each do |side|
        file = Tempfile.new("#{side}.md")
        file.write(side.upcase)
        file.close
        path = file.to_path

        system("vim", path)

        input = File.read(path).gsub(Regexp.new(Flashcards::LINE_BREAK), "\n").strip

        card_data[side] = input
      end
      deck.add_card(card_data)
    end

    def deck_loop(deck)
      loop do
        puts "[Cards in deck (#{deck.cards.length})]"
        puts
        action, args = menu(DECK_MENU)
        args.unshift(deck)
        args.unshift(self)

        if DECK_MENU_ACTIONS[action]
          DECK_MENU_ACTIONS[action].call(*args)
        elsif action == "menu"
          break
        else
          action_not_found(action)
        end
        puts
      end
    end

    def open_deck(filename)
      deck = Flashcards.read_deck(filename)
      deck_loop(deck)
    end

    def new_deck
      deck = Flashcards.new_deck
      deck_loop(deck)
    end
  end
end

Flashcards::Interactive.new.run
